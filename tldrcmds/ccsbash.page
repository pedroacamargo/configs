#ccsbash

> Shows the cheatsheet for bash scripting

- Will give read write and exec for actual user, same group buto others users will just be able to read:
`chmod 774 <file>`

- Transforms any file or folder in a .tar file, the same as .zip:
`tar -cvf`

- Reload the file and letting the changes be updated without the terminal restart:
`source <file>`

- The tilde allows you to access the $ HOME without having to type $ HOME
`cd ~/`

- ================= PARAMETER EXPANSION TRICKS =================

- Convert the first character of the parameter to uppercase
`${parameter^}`

- Convert all characters of the parameter to uppercase
`${parameter^^}`

- Convert the first character of the parameter to lowercase
`${parameter.}`

- Convert all characters of the parameter to lowercase
`${parameter..}`

- Display how many characters the variable's value contains
`${#parameter}`

- The shell will expand the value of the parameter starting at character number defined by "offset" and expand up to a length of "length"
`${parameter:offset:length}`


- ================= VARIABLES ===================

- PATH
`Contains the list of folders that the shell will search for executable files to run as command names`

- HOME
`Used to store the absolute path to the current user's home directory`

- USER
`Contains the username of the current user`

- HOSTNAME & HOSTTYPE
`Tell you about the computer you are using`

- PS1
`Contains the prompt string shown in the terminal before each command, you can customize its colors.`

- OLDPWD
`Contains the previous folder the currently user was.`

- ================= Command substitution & Arithmetic Expansion ===================

- Command substitution is used to directly reference the result of a command.
`$(command)`

- Arithmetic Expansion is used to perform mathematical calculations in your scripts.
`$((expression))`

- Using the bc command:
`echo "expression" | bc`

- Using the scale varible to control the number decimal places shown:
`echo "scale=value; expression" | bc`
